### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Address implements Node & Owned {
  """Whether or not the item is active. Soft delete items if false"""
  active: Boolean!

  """Street address"""
  address: String!

  """City of the address"""
  city: String!

  """Country connected to this address"""
  country: Country!

  """Id of country"""
  countryId: BigInt!

  """When the node was created"""
  createdDate: DateTime!

  """Unique identifier for this type"""
  id: BigInt!

  """Postal code of the address"""
  postalCode: String!

  """Region of the country"""
  region: String

  """When the node was last updated"""
  updatedDate: DateTime!

  """Universal unique identifier"""
  urn: ID!

  """Owner of the item"""
  user: User!

  """User how owns this address"""
  userId: BigInt!
}

input AddressCreateInputArgs {
  address: String!
  city: String!
  country: ConnectUniqueInputArgs!
  default: Boolean!
  postalCode: String!
  region: String
}

input AddressOrderByInputArgs {
  active: SortOrder
  address: SortOrder
  city: SortOrder
  country: CountryOrderByInputArgs
  countryId: SortOrder
  createdDate: SortOrder
  id: SortOrder
  postalCode: SortOrder
  region: SortOrder
  updatedDate: SortOrder
  user: UserOrderByInputArgs
  userId: SortOrder
}

input AddressUpdateInputArgs {
  active: Boolean
  address: String
  city: String
  country: ConnectUniqueInputArgs
  default: Boolean
  id: BigInt!
  postalCode: String
  region: String
}

input AddressWhereInputArgs {
  active: BoolFilter
  address: StringFilter
  city: StringFilter
  country: CountryWhereInputArgs
  createdDate: DateTimeFilter
  id: BigIntFilter
  postalCode: StringFilter
  region: StringFilter
  updatedDate: DateTimeFilter
  userId: BigIntFilter
}

type Audit implements Node {
  """When the node was created"""
  createdDate: DateTime!
  event: String

  """Unique identifier for this type"""
  id: BigInt!
  recordId: BigInt
  recordType: String

  """When the node was last updated"""
  updatedDate: DateTime!
  updatedValue: String

  """Universal unique identifier"""
  urn: ID!

  """User who performed the action"""
  user: User
  userId: BigInt
  value: String
}

type AuditConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [AuditEdge!]!

  """Flattened list of Audit type"""
  nodes: [Audit!]!

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

type AuditEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Audit!
}

input AuditOrderByInputArgs {
  createdDate: SortOrder
}

input AuditWhereInputArgs {
  createdDate: DateTimeFilter
  event: StringFilter
  id: BigIntFilter
  recordId: BigIntFilter
  recordType: RecordTypeFilter
  updatedDate: DateTimeFilter
  userId: BigIntFilter
}

type BankAccount implements Owned {
  bankAccount: String
  bankName: String
  bankRegistration: String

  """When item were created"""
  createdDate: DateTime!
  default: Boolean

  """When item last were updated"""
  updatedDate: DateTime!

  """Owner of the settings"""
  user: User!

  """Id of user"""
  userId: BigInt!
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

input BigIntFilter {
  equals: BigInt
  gt: BigInt
  gte: BigInt
  in: [BigInt!]
  lt: BigInt
  lte: BigInt
  not: BigInt
  notIn: [BigInt!]
}

input BoolFilter {
  equals: Boolean
  not: Boolean
}

type BulkUpdateResult {
  success: Boolean
}

input ConnectDisconnectUniqueInputArgs {
  connect: WhereUniqueInputArgs!
}

input ConnectUniqueInputArgs {
  connect: WhereUniqueInputArgs!
}

type CooperationAgreement implements CustomerRelation & Node & Owned {
  active: Boolean!

  """When the node was created"""
  createdDate: DateTime!

  """Linked customer"""
  customer: Customer!
  customerId: BigInt!

  """Cooperation agreement deliverable"""
  deliverables(orderBy: DeliverableOrderByInputArgs): [Deliverable!]!
  endDate: DateTime
  equipmentDetails: String
  equipmentSupplied: Boolean
  extraWork: Boolean!
  extraWorkNotification: String
  extraWorkNotificationOther: String

  """Unique identifier for this type"""
  id: BigInt!
  openEnded: Boolean!
  paymentTerm: String!
  paymentTermDays: Int!
  paymentTermOther: String
  paymentTermSpecial: String
  paymentType: String!
  specialConditions: String
  startDate: DateTime!
  taskDescription: String!
  terminationAgreement: String!

  """When the node was last updated"""
  updatedDate: DateTime!

  """Universal unique identifier"""
  urn: ID!

  """Owner of the item"""
  user: User!
  userId: BigInt!
}

type CooperationAgreementConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [CooperationAgreementEdge!]!

  """Flattened list of CooperationAgreement type"""
  nodes: [CooperationAgreement!]!

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

input CooperationAgreementCreateInputArgs {
  active: Boolean!
  createAsUserId: BigInt
  customerId: BigInt!
  deliverables: CooperationAgreementCreateNestedDeliverableInputArgs
  endDate: DateTime
  equipmentDetails: String
  equipmentSupplied: Boolean
  extraWork: Boolean!
  extraWorkNotification: String
  extraWorkNotificationOther: String
  openEnded: Boolean!
  paymentTerm: String!
  paymentTermDays: Int!
  paymentTermOther: String
  paymentTermSpecial: String!
  paymentType: String!
  specialConditions: String!
  startDate: DateTime!
  taskDescription: String!
  terminationAgreement: String!
}

input CooperationAgreementCreateNestedDeliverableInputArgs {
  create: [DeliverableCreateInputArgs!]!
}

type CooperationAgreementEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: CooperationAgreement!
}

input CooperationAgreementOrderByInputArgs {
  createdDate: SortOrder
  startDate: SortOrder
  updatedDate: SortOrder
  user: UserOrderByInputArgs
}

input CooperationAgreementUpdateInputArgs {
  active: Boolean
  customerId: BigInt
  deliverables: CooperationAgreementUpdateNestedDeliverablesInputArgs
  endDate: DateTime
  equipmentDetails: String
  equipmentSupplied: Boolean
  extraWork: Boolean
  extraWorkNotification: String
  extraWorkNotificationOther: String
  openEnded: Boolean
  paymentTerm: String
  paymentTermDays: Int
  paymentTermOther: String
  paymentTermSpecial: String
  paymentType: String
  specialConditions: String
  startDate: DateTime
  taskDescription: String
  terminationAgreement: String
}

input CooperationAgreementUpdateNestedDeliverableInputArgs {
  data: DeliverableUpdateInputArgs!
  where: WhereUniqueInputArgs!
}

input CooperationAgreementUpdateNestedDeliverablesInputArgs {
  create: [DeliverableCreateInputArgs!]
  delete: [WhereUniqueInputArgs!]
  update: [CooperationAgreementUpdateNestedDeliverableInputArgs!]
}

input CooperationAgreementWhereInputArgs {
  active: BoolFilter
  createdDate: DateTimeFilter
  id: BigIntFilter
  query: String
  startDate: DateTimeFilter
  updatedDate: DateTimeFilter
  user: UserWhereInputArgs
}

type Country implements Node {
  """Whether or not the item is active. Soft delete items if false"""
  active: Boolean!

  """Country code"""
  code: String!

  """When the node was created"""
  createdDate: DateTime!

  """Unique identifier for this type"""
  id: BigInt!

  """Country name in Danish"""
  name_da: String!

  """Country name in English"""
  name_en: String!

  """When the node was last updated"""
  updatedDate: DateTime!

  """Universal unique identifier"""
  urn: ID!
}

input CountryOrderByInputArgs {
  active: SortOrder
  code: SortOrder
  createdDate: SortOrder
  id: SortOrder
  name_da: SortOrder
  name_en: SortOrder
  updatedDate: SortOrder
}

input CountryWhereInputArgs {
  active: BoolFilter
  code: StringFilter
  createdDate: DateTimeFilter
  id: BigIntFilter
  name: StringFilter
  updatedDate: DateTimeFilter
}

type Customer implements Node & Owned {
  """Whether or not the item is active. Soft delete items if false"""
  active: Boolean!

  """Customer address"""
  address: Address!

  """Whether early payment is allowed for this customer"""
  allowEarlyPayment: Boolean

  """Connected parent customer - only copies have a parent"""
  completedInvoices: Int!

  """Customer contact person"""
  contact: String!

  """When item were created"""
  createdDate: DateTime!

  """Customer EAN number"""
  ean: BigInt

  """ID of the customer within e-conomic"""
  economicCustomerId: Int

  """Customer email"""
  email: String!

  """Unique identifier for this type"""
  id: BigInt!

  """Total invoiced"""
  invoicedTotal: Float!

  """Customer name"""
  name: String!

  """Connected parent customer - only copies have a parent"""
  openInvoices: Int!

  """Customer default due days"""
  paymentDueDays: Int

  """Customer phone number"""
  phoneNumber: String!

  """Type of customer"""
  type: CustomerTypeEnum!

  """When item last were updated"""
  updatedDate: DateTime!

  """Universal unique identifier"""
  urn: ID!

  """Owner of the customer"""
  user: User!

  """Id of user"""
  userId: BigInt!

  """Customer international vat id"""
  vatId: String
}

type CustomerConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [CustomerEdge!]!

  """Flattened list of Customer type"""
  nodes: [Customer!]!

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

input CustomerCreateInputArgs {
  address: CustomerCreateNestedAddressInputArgs!
  contact: String!
  createAsUserId: BigInt
  ean: BigInt
  email: String!
  name: String!
  paymentDueDays: Int
  phoneNumber: String!
  type: CustomerTypeEnum!
  vatId: String
}

input CustomerCreateNestedAddressInputArgs {
  create: AddressCreateInputArgs!
}

type CustomerEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Customer!
}

input CustomerOrderByInputArgs {
  active: SortOrder
  address: AddressOrderByInputArgs
  addressId: SortOrder
  contact: SortOrder
  createdDate: SortOrder
  ean: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrder
  paymentDueDays: SortOrder
  phoneNumber: SortOrder
  type: SortOrder
  updatedDate: SortOrder
  user: UserOrderByInputArgs
  userId: SortOrder
  vatId: SortOrder
}

interface CustomerRelation {
  """Linked customer"""
  customer: Customer!

  """Customer ID"""
  customerId: BigInt
}

"""Type of customer"""
enum CustomerTypeEnum {
  BUSINESS
  PRIVATE
}

input CustomerTypeFilter {
  equals: CustomerTypeEnum
  in: [CustomerTypeEnum!]
  not: CustomerTypeEnum
  notIn: [CustomerTypeEnum!]
}

input CustomerUpdateInputArgs {
  active: Boolean
  address: CustomerUpdateNestedAddressInputArgs
  allowEarlyPayment: Boolean
  contact: String
  ean: BigInt
  email: String
  name: String
  paymentDueDays: Int
  phoneNumber: String
  type: CustomerTypeEnum
  vatId: String
}

input CustomerUpdateNestedAddressInputArgs {
  update: AddressUpdateInputArgs!
}

input CustomerWhereInputArgs {
  active: BoolFilter
  address: AddressWhereInputArgs
  contact: StringFilter
  createdDate: DateTimeFilter
  ean: BigIntFilter
  email: StringFilter
  id: BigIntFilter
  name: StringFilter
  paymentDueDays: IntFilter
  phoneNumber: StringFilter
  private: BoolFilter
  query: String
  type: CustomerTypeFilter
  updatedDate: DateTimeFilter
  user: UserWhereInputArgs
  vatId: BigIntFilter
}

type Dashboard {
  draft: DashboardItem
  expired: DashboardItem
  open: DashboardItem
  paidOut: DashboardItem
}

type DashboardItem {
  amount: Decimal!
  count: Int!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilter {
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
}

"""Decimal custom scalar type"""
scalar Decimal

type Deduction implements Node & Owned {
  active: Boolean!

  """When item were created"""
  createdDate: DateTime!

  """Currency that the deduction is in"""
  currency: String

  """Short description of the deduction"""
  description: String!

  """Unique identifier for this type"""
  id: BigInt!

  """Url that the deduction image can be viewed at"""
  imageUrl: String

  """Whether the deduction includes VAT or not"""
  includeVat: Boolean

  """Status enum"""
  status: DeductionStatusEnum!

  """Total amount of the deduction"""
  total: Decimal

  """Total amount of the deduction in Danish Krone"""
  totalDkk: Decimal

  """When item last were updated"""
  updatedDate: DateTime!

  """Universal unique identifier"""
  urn: ID!

  """Owner of the deduction"""
  user: User!

  """Id of user"""
  userId: BigInt!
}

type DeductionConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [DeductionEdge!]!

  """Flattened list of Deduction type"""
  nodes: [Deduction!]!

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

input DeductionCreateInputArgs {
  createAsUserId: BigInt
  currency: String!
  description: String!
  includeVat: Boolean!
  status: DeductionStatusEnum!
  total: Decimal!
}

type DeductionEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Deduction!
}

input DeductionListRelationWhereArgs {
  every: DeductionWhereInputArgs
  none: DeductionWhereInputArgs
  some: DeductionWhereInputArgs
}

input DeductionOrderByInputArgs {
  createdDate: SortOrder
  description: SortOrder
  status: SortOrder
  updatedDate: SortOrder
  user: UserOrderByInputArgs
  userId: SortOrder
}

"""Allowed deduction statuses"""
enum DeductionStatusEnum {
  APPROVED
  DECLINED
  DELETED_BY_USER
  DRAFT
  SENT
}

input DeductionStatusFilter {
  equals: DeductionStatusEnum
  in: [DeductionStatusEnum!]
  not: DeductionStatusEnum
  notIn: [DeductionStatusEnum!]
}

input DeductionUpdateInputArgs {
  active: Boolean
  currency: String
  description: String
  includeVat: Boolean
  status: DeductionStatusEnum
  total: Decimal
}

input DeductionWhereInputArgs {
  active: BoolFilter
  createdDate: DateTimeFilter
  description: StringFilter
  id: BigIntFilter
  query: String
  status: DeductionStatusFilter
  updatedDate: DateTimeFilter
  user: UserWhereInputArgs
}

type Deliverable implements Node {
  """When the node was created"""
  createdDate: DateTime!
  description: String!

  """Unique identifier for this type"""
  id: BigInt!

  """When the node was last updated"""
  updatedDate: DateTime!

  """Universal unique identifier"""
  urn: ID!
}

input DeliverableCreateInputArgs {
  description: String!
}

input DeliverableOrderByInputArgs {
  description: SortOrder
}

input DeliverableUpdateInputArgs {
  description: String
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Invoice implements Node & Owned {
  """Whether or not the item is active. Soft delete items if false"""
  active: Boolean!

  """When item were created"""
  createdDate: DateTime!
  creditsUsed: Int!

  """Invoiced currency"""
  currency: String!

  """Customer of the invoice - see also customerCopy"""
  customer: Customer!
  customerAddress: String!
  customerCity: String!
  customerContact: String!
  customerEmail: String!

  """Id of customer"""
  customerId: BigInt!
  customerPostalCode: String!
  discountMaxValue: Decimal!
  discountType: String!
  discountValue: Decimal!
  dueDate: DateTime!

  """Whether the invoice should be paid early or not"""
  earlyPayment: Boolean!
  economicInvoiceId: Int

  """Date when the work end"""
  endDate: DateTime

  """The fee payable to Factofly"""
  feeAmountDkk: Decimal

  """Hours worked - insurance wise"""
  hoursWorked: Int!

  """Unique identifier for this type"""
  id: BigInt!

  """Is VAT applied to invoice"""
  includeVat: Boolean!

  """Date when invoiced"""
  invoiceDate: DateTime!

  """Job type of the invoice"""
  jobType: JobType

  """Id of job type"""
  jobTypeId: BigInt

  """Invoice lines"""
  lines(orderBy: InvoiceLineOrderByInputArgs): [InvoiceLine!]!

  """Invoice note"""
  note: String
  overdue: Boolean!

  """The final amount that was paid by the customer"""
  paidAmountDkk: Decimal

  """Days due for this invoice"""
  paymentDueDays: Int!

  """Invoice reference"""
  reference: String
  sendInvoiceCopyTo: String

  """Service logs"""
  serviceLogs: [ServiceLog!]!

  """Date when the work started"""
  startDate: DateTime

  """Status enum"""
  status: InvoiceStatusEnum!
  subtotalDkk: Decimal!

  """Task based on this invoice"""
  task: Task

  """Id of task"""
  taskId: BigInt

  """Invoice terms accepted"""
  termsAccepted: Boolean!
  totalPrice: Float!
  totalPriceWithVat: Float!

  """When item last were updated"""
  updatedDate: DateTime!

  """Universal unique identifier"""
  urn: ID!

  """Owner of the invoice"""
  user: User!

  """Id of user"""
  userId: BigInt!

  """Should this invoice set aside some of the value to vacation payments"""
  vacationPayment: Boolean!
  vatAmount: Float!

  """Percentage of vat"""
  vatPercentage: Float!

  """User-centric identifier"""
  visibleId: BigInt
}

input InvoiceBulkUpdateInputArgs {
  data: InvoiceUpdateInputArgs
  where: WhereUniqueInputArgs
}

type InvoiceConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [InvoiceEdge!]!

  """Flattened list of Invoice type"""
  nodes: [Invoice!]!

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

input InvoiceCreateInputArgs {
  createAsUserId: BigInt
  currency: String!
  customer: InvoiceCreateNestedCustomerInputArgs!
  customerContact: String!
  customerEmail: String!
  earlyPayment: Boolean!
  endDate: DateTime!
  hoursWorked: Int!
  includeVat: Boolean!
  invoiceDate: DateTime!
  jobType: InvoiceCreateNestedJobTypeInputArgs!
  lines: InvoiceCreateNestedLineInputArgs!
  note: String
  paymentDueDays: Int!
  reference: String
  sendInvoiceCopyTo: String
  startDate: DateTime!
  status: InvoiceStatusEnum!
  task: InvoiceCreateNestedTaskInputArgs
  termsAccepted: Boolean!
  useCredit: Boolean!
  vacationPayment: Boolean!
}

input InvoiceCreateNestedCustomerInputArgs {
  connect: WhereUniqueInputArgs
  create: CustomerCreateInputArgs
}

input InvoiceCreateNestedJobTypeInputArgs {
  connect: WhereUniqueInputArgs!
}

input InvoiceCreateNestedLineInputArgs {
  create: [InvoiceLineCreateInputArgs!]!
}

input InvoiceCreateNestedTaskInputArgs {
  connect: WhereUniqueInputArgs!
}

type InvoiceEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Invoice!
}

type InvoiceLine implements Node & Owned {
  """Whether or not the item is active. Soft delete items if false"""
  active: Boolean!

  """When item were created"""
  createdDate: DateTime!

  """Description of item"""
  description: String!

  """Discount in percent for the line"""
  discountPercentage: Float

  """Unique identifier for this type"""
  id: BigInt!

  """Index of the line in relation to other lines for the same invoice"""
  index: Int!

  """Invoice of the line"""
  invoice: Invoice!

  """Id of invoice"""
  invoiceId: ID!

  """Number of units"""
  quantity: Float!

  """Total price of the line"""
  totalPrice: Float!

  """Unit name"""
  unit: String

  """Price per unit"""
  unitPrice: Float!

  """When item last were updated"""
  updatedDate: DateTime!

  """Universal unique identifier"""
  urn: ID!

  """Owner of the invoice line"""
  user: User!

  """Id of user"""
  userId: BigInt!
}

input InvoiceLineCreateInputArgs {
  description: String!
  discountPercentage: Float
  index: Int!
  quantity: Float!
  unit: String
  unitPrice: Float!
}

input InvoiceLineOrderByInputArgs {
  description: SortOrder
  discountPercentage: SortOrder
  index: SortOrder
  quantity: SortOrder
  unit: SortOrder
  unitPrice: SortOrder
}

input InvoiceLineUpdateInputArgs {
  active: Boolean
  description: String
  discountPercentage: Float
  index: Int
  quantity: Float
  unit: String
  unitPrice: Float
}

input InvoiceListRelationWhereArgs {
  every: InvoiceWhereInputArgs
  none: InvoiceWhereInputArgs
  some: InvoiceWhereInputArgs
}

input InvoiceOrderByInputArgs {
  active: SortOrder
  createdDate: SortOrder
  currency: SortOrder
  customer: CustomerOrderByInputArgs
  customerId: SortOrder
  endDate: SortOrder
  hoursWorked: SortOrder
  id: SortOrder
  includeVat: SortOrder
  invoiceDate: SortOrder
  jobType: JobTypeOrderByInputArgs
  jobTypeId: SortOrder
  note: SortOrder
  paymentDueDays: SortOrder
  reference: SortOrder
  startDate: SortOrder
  status: SortOrder
  task: TaskOrderByInputArgs
  taskId: SortOrder
  termsAccepted: SortOrder
  total: SortOrder
  updatedDate: SortOrder
  user: UserOrderByInputArgs
  userId: SortOrder
  vacationPayment: SortOrder
}

"""Allowed invoice statuses"""
enum InvoiceStatusEnum {
  APPROVED_BY_COMPANY
  CANCELLED
  COMPANY_DISPUTE
  DEBT_COLLECTION
  DENIED_BY_COMPANY
  DRAFT
  LATE_PAYMENT
  MORE_INFO_NEEDED
  PAID
  PAYMENT_ON_HOLD
  PAYMENT_RECEIVED
  PENDING
  SALARY_PAID
  SALARY_PAID_CUSTOMER_NOT_PAID
  SALARY_PAID_CUSTOMER_PAID
  SENT
  SENT_TO_COMPANY
  SENT_TO_COMPANY_AWAITING_APPROVAL
  SENT_TO_COMPANY_CONTRACT_MADE
  SENT_TO_COMPANY_NEEDS_CONTRACT
}

input InvoiceStatusFilter {
  equals: InvoiceStatusEnum
  in: [InvoiceStatusEnum!]
  not: InvoiceStatusEnum
  notIn: [InvoiceStatusEnum!]
}

input InvoiceUpdateInputArgs {
  active: Boolean
  currency: String
  customer: InvoiceUpdateNestedCustomerInputArgs
  customerContact: String
  customerEmail: String
  earlyPayment: Boolean
  endDate: DateTime
  hoursWorked: Int
  includeVat: Boolean
  invoiceDate: DateTime
  jobType: InvoiceUpdateNestedJobTypeInputArgs
  lines: InvoiceUpdateNestedLinesInputArgs
  note: String
  paidAmountDkk: Decimal
  paymentDueDays: Int
  reference: String
  sendInvoiceCopyTo: String
  startDate: DateTime
  status: InvoiceStatusEnum
  task: InvoiceUpdateNestedTaskInputArgs
  termsAccepted: Boolean
  useCredit: Boolean
  vacationPayment: Boolean
}

input InvoiceUpdateNestedCustomerInputArgs {
  connect: WhereUniqueInputArgs
  create: CustomerCreateInputArgs
}

input InvoiceUpdateNestedJobTypeInputArgs {
  connect: WhereUniqueInputArgs!
}

input InvoiceUpdateNestedLineInputArgs {
  data: InvoiceLineUpdateInputArgs!
  where: WhereUniqueInputArgs!
}

input InvoiceUpdateNestedLinesInputArgs {
  create: [InvoiceLineCreateInputArgs!]
  delete: [WhereUniqueInputArgs!]
  update: [InvoiceUpdateNestedLineInputArgs!]
}

input InvoiceUpdateNestedTaskInputArgs {
  connect: WhereUniqueInputArgs
  disconnect: Boolean
}

input InvoiceUpdateStatusInputArgs {
  reason: String
  status: InvoiceStatusEnum!
}

input InvoiceWhereInputArgs {
  active: BoolFilter
  createdDate: DateTimeFilter
  currency: StringFilter
  customer: CustomerWhereInputArgs
  endDate: DateTimeFilter
  hoursWorked: IntFilter
  id: BigIntFilter
  includeVat: BoolFilter
  invoiceDate: DateTimeFilter
  jobType: JobTypeWhereInputArgs
  note: StringFilter
  paymentDueDays: IntFilter
  query: String
  reference: StringFilter
  salaryId: BigIntFilter
  startDate: DateTimeFilter
  status: InvoiceStatusFilter
  task: TaskWhereInputArgs
  termsAccepted: BoolFilter
  updatedDate: DateTimeFilter
  user: UserWhereInputArgs
  vacationPayment: BoolFilter
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type JobType implements Node {
  """Whether or not the item is active. Soft delete items if false"""
  active: Boolean!

  """Classification of job"""
  classification: String

  """When item were created"""
  createdDate: DateTime!

  """Description of job"""
  description: String!

  """Classification of job"""
  group: Boolean!

  """Unique identifier for this type"""
  id: BigInt!

  """Name of the job in Danish"""
  name_da: String!

  """Name of the job in English"""
  name_en: String!

  """Classification of job"""
  parent: JobType

  """Classification of job"""
  parentId: BigInt

  """When item last were updated"""
  updatedDate: DateTime!

  """Universal unique identifier"""
  urn: ID!
}

input JobTypeOrderByInputArgs {
  active: SortOrder
  classification: SortOrder
  createdDate: SortOrder
  description: SortOrder
  group: SortOrder
  id: SortOrder
  name_da: SortOrder
  name_en: SortOrder
  parentId: SortOrder
  updatedDate: SortOrder
}

input JobTypeWhereInputArgs {
  active: BoolFilter
  classification: StringFilter
  createdDate: DateTimeFilter
  description: StringFilter
  group: BoolFilter
  id: BigInt
  name: StringFilter
  parent: JobTypeWhereInputArgs
  updatedDate: DateTimeFilter
}

type Mutation {
  createCooperationAgreement(data: CooperationAgreementCreateInputArgs!): CooperationAgreement
  createCustomer(data: CustomerCreateInputArgs!): Customer!
  createDeduction(data: DeductionCreateInputArgs!): Deduction
  createInvoice(data: InvoiceCreateInputArgs!): Invoice!
  createReferral(data: ReferralCreateInputArgs!): Referral
  createSalary(data: SalaryCreateInputArgs!): Salary
  createTask(data: TaskCreateInputArgs!): Task
  fetchPayroll(where: WhereUniqueInputArgs!): SuccessResult!
  sendInvoice(where: WhereUniqueInputArgs!): SuccessResult!
  updateCooperationAgreement(data: CooperationAgreementUpdateInputArgs!, where: WhereUniqueInputArgs!): CooperationAgreement
  updateCustomer(data: CustomerUpdateInputArgs!, where: WhereUniqueInputArgs!): Customer!
  updateDeduction(data: DeductionUpdateInputArgs!, where: WhereUniqueInputArgs!): Deduction
  updateDeductions(data: DeductionUpdateInputArgs!, where: [WhereUniqueInputArgs]!): BulkUpdateResult!
  updateInvoice(data: InvoiceUpdateInputArgs!, where: WhereUniqueInputArgs!): Invoice!
  updateInvoices(data: [InvoiceBulkUpdateInputArgs]!): BulkUpdateResult!
  updateSalary(data: SalaryUpdateInputArgs!, where: WhereUniqueInputArgs!): Salary
  updateTask(data: TaskUpdateInputArgs!, where: WhereUniqueInputArgs!): Task
  updateTaskStatus(data: TaskUpdateStatusInputArgs!, where: WhereUniqueInputArgs!): Task
  updateUser(data: UserUpdateInputArgs!, where: WhereUniqueInputArgs!): User!
}

interface Node {
  """When the node was created"""
  createdDate: DateTime!

  """Unique identifier for this type"""
  id: BigInt!

  """When the node was last updated"""
  updatedDate: DateTime!

  """Universal unique identifier"""
  urn: ID!
}

interface Owned {
  """Owner of the item"""
  user: User!

  """Owning user id"""
  userId: BigInt
}

"""
PageInfo cursor, as defined in https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  The cursor corresponding to the last nodes in edges. Null if the connection is empty.
  """
  endCursor: String

  """
  Used to indicate whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Used to indicate whether more edges exist prior to the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  The cursor corresponding to the first nodes in edges. Null if the connection is empty.
  """
  startCursor: String
}

type Query {
  audit(where: WhereUniqueInputArgs!): Audit
  audits(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the first n elements from the list."""
    first: Int!
    orderBy: AuditOrderByInputArgs
    skip: Int
    where: AuditWhereInputArgs
  ): AuditConnection!
  cooperationAgreement(where: WhereUniqueInputArgs!): CooperationAgreement
  cooperationAgreements(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the first n elements from the list."""
    first: Int!
    orderBy: CooperationAgreementOrderByInputArgs
    skip: Int
    where: CooperationAgreementWhereInputArgs
  ): CooperationAgreementConnection!

  """List all countries"""
  countries(orderBy: CountryOrderByInputArgs, where: CountryWhereInputArgs): [Country!]!
  country(where: WhereUniqueInputArgs!): Country
  customer(where: WhereUniqueInputArgs!): Customer
  customers(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the first n elements from the list."""
    first: Int!
    orderBy: CustomerOrderByInputArgs
    skip: Int
    where: CustomerWhereInputArgs
  ): CustomerConnection!
  dashboard: Dashboard
  deduction(where: WhereUniqueInputArgs!): Deduction
  deductions(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the first n elements from the list."""
    first: Int!
    orderBy: DeductionOrderByInputArgs
    skip: Int
    where: DeductionWhereInputArgs
  ): DeductionConnection!
  invoice(where: WhereUniqueInputArgs!): Invoice
  invoices(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the first n elements from the list."""
    first: Int!
    orderBy: InvoiceOrderByInputArgs
    skip: Int
    where: InvoiceWhereInputArgs
  ): InvoiceConnection!
  jobType(where: WhereUniqueInputArgs!): JobType

  """List all job types"""
  jobTypes(orderBy: JobTypeOrderByInputArgs, where: JobTypeWhereInputArgs): [JobType!]!
  me: User!
  referral(where: WhereUniqueInputArgs!): Referral
  referrals(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the first n elements from the list."""
    first: Int!
    orderBy: ReferralOrderByInputArgs
    skip: Int
    where: ReferralWhereInputArgs
  ): ReferralConnection!
  salaries(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the first n elements from the list."""
    first: Int!
    orderBy: SalaryOrderByInputArgs
    skip: Int
    where: SalaryWhereInputArgs
  ): SalaryConnection!
  salary(where: WhereUniqueInputArgs!): Salary
  serviceLog(where: WhereUniqueInputArgs!): ServiceLog
  serviceLogs(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the first n elements from the list."""
    first: Int!
    orderBy: ServiceLogOrderByInputArgs
    skip: Int
    where: ServiceLogWhereInputArgs
  ): ServiceLogConnection!
  task(where: WhereUniqueInputArgs!): Task
  tasks(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the first n elements from the list."""
    first: Int!
    orderBy: TaskOrderByInputArgs
    skip: Int
    where: TaskWhereInputArgs
  ): TaskConnection!
  user(where: WhereUniqueInputArgs!): User
  users(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the first n elements from the list."""
    first: Int!
    orderBy: UserOrderByInputArgs
    skip: Int
    where: UserWhereInputArgs
  ): UserConnection!
  vatSearch(query: String!): [VatSearchResult!]!
}

"""Allowed invoice statuses"""
enum RecordTypeEnum {
  COMPANY
  COOPERATION_AGREEMENT
  CUSTOMER
  DEDUCTION
  INVOICE
  INVOICE_LINE
  REFERRAL
  REWARD
  SALARY
  TASK
  USER
}

input RecordTypeFilter {
  equals: RecordTypeEnum
  in: [RecordTypeEnum!]
  not: RecordTypeEnum
  notIn: [RecordTypeEnum!]
}

type Referral implements Node & Owned {
  """When the node was created"""
  createdDate: DateTime!

  """The recipient email address"""
  email: String!

  """Unique identifier for this type"""
  id: BigInt!

  """The referral message"""
  message: String!

  """User referred with this referral"""
  referredUser: User

  """Status enum"""
  status: ReferralStatusEnum!

  """When the node was last updated"""
  updatedDate: DateTime!

  """Universal unique identifier"""
  urn: ID!

  """Owner of the task"""
  user: User!

  """Id of user"""
  userId: BigInt!
}

type ReferralConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [ReferralEdge!]!

  """Flattened list of Referral type"""
  nodes: [Referral!]!

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

input ReferralCreateInputArgs {
  createAsUserId: BigInt
  email: String!
  message: String!
}

type ReferralEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Referral!
}

input ReferralOrderByInputArgs {
  createdDate: SortOrder
  id: SortOrder
  updatedDate: SortOrder
  user: UserOrderByInputArgs
}

"""Allowed referral statuses"""
enum ReferralStatusEnum {
  NONE
  PAID_INVOICE
  SENT_INVOICE
  SIGNED_UP
}

input ReferralStatusFilter {
  equals: ReferralStatusEnum
  in: [ReferralStatusEnum!]
  not: ReferralStatusEnum
  notIn: [ReferralStatusEnum!]
}

input ReferralWhereInputArgs {
  createdDate: DateTimeFilter
  email: StringFilter
  id: BigIntFilter
  query: String
  referredUser: UserWhereInputArgs
  status: ReferralStatusFilter
  updatedDate: DateTimeFilter
  user: UserWhereInputArgs
}

"""Users assigned role"""
enum RoleEnum {
  ADMIN
  EMPLOYEE
  USER
}

input RoleFilter {
  equals: RoleEnum
  in: [RoleEnum!]
  not: RoleEnum
  notIn: [RoleEnum!]
}

type Salary implements Node & Owned {
  """When item were created"""
  createdDate: DateTime!
  deductions: [Deduction!]

  """Url that the fee invoice can be viewed at"""
  feeInvoiceUrl: String
  grossIncome: Decimal

  """Unique identifier for this type"""
  id: BigInt!
  invoices: [Invoice!]
  paymentAmount: Decimal
  paymentDate: DateTime!

  """Url that the payslip can be viewed at"""
  payslipUrl: String
  status: SalaryStatusEnum!

  """When item last were updated"""
  updatedDate: DateTime!

  """Universal unique identifier"""
  urn: ID!

  """Owner of the salary"""
  user: User!

  """Id of user"""
  userId: BigInt!
}

type SalaryConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [SalaryEdge!]!

  """Flattened list of Salary type"""
  nodes: [Salary!]!

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

input SalaryCreateInputArgs {
  deductions: [Int!]
  invoices: [Int!]
  paymentDate: DateTime!
  userId: BigInt
}

type SalaryEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Salary!
}

input SalaryOrderByInputArgs {
  createdDate: SortOrder
  id: SortOrder
  paymentDate: SortOrder
  status: SortOrder
  updatedDate: SortOrder
  user: UserOrderByInputArgs
  userId: SortOrder
}

"""Details about when salary needs to be paid for the user"""
enum SalaryPaymentTypeEnum {
  EARLY
  ON_PAYMENT
  TIMED
  VALUE
  VIA_INVOICE
}

"""Allowed salary statuses"""
enum SalaryStatusEnum {
  DRAFT
  PAID
  SENT
}

input SalaryStatusFilter {
  equals: SalaryStatusEnum
  in: [SalaryStatusEnum!]
  not: SalaryStatusEnum
  notIn: [SalaryStatusEnum!]
}

input SalaryUpdateInputArgs {
  deductions: [Int!]
  id: BigInt
  invoices: [Int!]
  paymentDate: DateTime
  status: SalaryStatusEnum
}

input SalaryWhereInputArgs {
  createdDate: DateTimeFilter
  deductions: DeductionListRelationWhereArgs
  id: BigIntFilter
  invoices: InvoiceListRelationWhereArgs
  paymentDate: DateTimeFilter
  query: String
  status: SalaryStatusFilter
  updatedDate: DateTimeFilter
  user: UserWhereInputArgs
}

type ServiceLog implements Node {
  """When the node was created"""
  createdDate: DateTime!

  """Unique identifier for this type"""
  id: BigInt!
  message: String
  recordId: BigInt
  recordType: RecordTypeEnum
  service: String
  status: String

  """When the node was last updated"""
  updatedDate: DateTime!

  """Universal unique identifier"""
  urn: ID!
}

type ServiceLogConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [ServiceLogEdge!]!

  """Flattened list of ServiceLog type"""
  nodes: [ServiceLog!]!

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

type ServiceLogEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: ServiceLog!
}

input ServiceLogOrderByInputArgs {
  createdDate: SortOrder
}

input ServiceLogWhereInputArgs {
  createdDate: DateTimeFilter
  id: BigIntFilter
  recordId: BigIntFilter
  recordType: RecordTypeFilter
  status: StringFilter
  updatedDate: DateTimeFilter
}

enum SortOrder {
  asc
  desc
}

type StatusDetail {
  completedStatus: Boolean!
  description: String!

  """Status enum"""
  id: StatusEnum!
  invoiceStatus: Boolean!
  invoicedStatus: Boolean!
  openStatus: Boolean!
  taskStatus: Boolean!
}

"""Both task and invoice statuses"""
enum StatusEnum {
  APPROVED
  CANCELLED
  COMPANY_DISPUTE
  DEBT_COLLECTION
  DENIED
  DENIED_BY_COMPANY
  DRAFT
  LATE_PAYMENT
  MORE_INFO_NEEDED
  PAID
  PENDING
  SALARY_PAID
  SENT
  SENT_TO_COMPANY
}

input StatusFilter {
  equals: StatusEnum
  in: [StatusEnum!]
  not: StatusEnum
  notIn: [StatusEnum!]
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type SuccessResult {
  id: BigInt!
  success: Boolean
}

type Task implements Node & Owned {
  """Whether or not the item is active. Soft delete items if false"""
  active: Boolean!

  """When item were created"""
  createdDate: DateTime!

  """Customer related to this task"""
  customer: Customer!

  """Id of customer"""
  customerId: BigInt!

  """Description of the task"""
  description: String

  """Date when the work is estimated to end at"""
  endDate: DateTime!

  """How many hours are expected in this task"""
  expectedHours: Int!

  """Unique identifier for this type"""
  id: BigInt!

  """Job type of the task"""
  jobType: JobType!

  """Id of job type"""
  jobTypeId: BigInt!

  """Amount that the user should receive"""
  paymentAmount: Decimal

  """How payment for the task is calculated"""
  paymentType: TaskPaymentTypeEnum

  """Reference field"""
  reference: String

  """Date when the work is estimated to start from"""
  startDate: DateTime!

  """Status enum"""
  status: TaskStatusEnum!

  """Task terms are accepted"""
  termsAccepted: Boolean!

  """Short description of the job"""
  title: String!

  """When item last were updated"""
  updatedDate: DateTime!

  """Universal unique identifier"""
  urn: ID!

  """Owner of the task"""
  user: User!

  """Id of user"""
  userId: BigInt!
}

type TaskConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [TaskEdge!]!

  """Flattened list of Task type"""
  nodes: [Task!]!

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

input TaskCreateInputArgs {
  createAsUserId: BigInt
  customer: TaskCreateNestedCustomerInputArgs!
  description: String
  endDate: DateTime!
  expectedHours: Int!
  jobType: TaskCreateNestedJobTypeInputArgs!
  paymentAmount: Decimal
  paymentType: TaskPaymentTypeEnum
  reference: String
  startDate: DateTime!
  status: TaskStatusEnum!
  termsAccepted: Boolean!
  title: String!
}

input TaskCreateNestedCustomerInputArgs {
  connect: WhereUniqueInputArgs
  create: CustomerCreateInputArgs
}

input TaskCreateNestedJobTypeInputArgs {
  connect: WhereUniqueInputArgs!
}

type TaskEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Task!
}

input TaskOrderByInputArgs {
  active: SortOrder
  createdDate: SortOrder
  customer: CustomerOrderByInputArgs
  customerId: SortOrder
  endDate: SortOrder
  expectedHours: SortOrder
  id: SortOrder
  jobType: JobTypeOrderByInputArgs
  jobTypeId: SortOrder
  reference: SortOrder
  startDate: SortOrder
  status: SortOrder
  termsAccepted: SortOrder
  title: SortOrder
  updatedDate: SortOrder
  user: UserOrderByInputArgs
  userId: SortOrder
}

"""Allowed task payment types"""
enum TaskPaymentTypeEnum {
  PER_HOUR
  PROJECT_PRICE
}

"""Allowed task statuses"""
enum TaskStatusEnum {
  APPROVED
  DENIED
  DRAFT
  MORE_INFO_NEEDED
  PENDING
  SENT
}

input TaskStatusFilter {
  equals: TaskStatusEnum
  in: [TaskStatusEnum!]
  not: TaskStatusEnum
  notIn: [TaskStatusEnum!]
}

input TaskUpdateInputArgs {
  active: Boolean
  customer: TaskUpdateNestedCustomerInputArgs
  description: String
  endDate: DateTime
  expectedHours: Int
  jobType: TaskUpdateNestedJobTypeInputArgs
  paymentAmount: Decimal
  paymentType: TaskPaymentTypeEnum
  reference: String
  startDate: DateTime
  status: TaskStatusEnum
  termsAccepted: Boolean
  title: String
}

input TaskUpdateNestedCustomerInputArgs {
  connect: WhereUniqueInputArgs
  create: CustomerCreateInputArgs
}

input TaskUpdateNestedJobTypeInputArgs {
  connect: WhereUniqueInputArgs!
}

input TaskUpdateStatusInputArgs {
  reason: String
  status: TaskStatusEnum!
}

input TaskWhereInputArgs {
  active: BoolFilter
  createdDate: DateTimeFilter
  customer: CustomerWhereInputArgs
  endDate: DateTimeFilter
  expectedHours: IntFilter
  id: BigIntFilter
  invoices: InvoiceListRelationWhereArgs
  jobType: JobTypeWhereInputArgs
  query: String
  reference: StringFilter
  startDate: DateTimeFilter
  status: TaskStatusFilter
  termsAccepted: BoolFilter
  title: StringFilter
  updatedDate: DateTimeFilter
  user: UserWhereInputArgs
}

"""The tax card used for the user"""
enum TaxCardEnum {
  MAIN
  SECONDARY
}

type TaxInfo implements Owned {
  countryId: BigInt

  """When item were created"""
  createdDate: DateTime!
  personId: String
  taxCard: String

  """When item last were updated"""
  updatedDate: DateTime!

  """Owner of the settings"""
  user: User!

  """Id of user"""
  userId: BigInt!
}

type User implements Node {
  """Whether the user has completed the account setup"""
  accountSetupComplete: Boolean

  """Whether the user is active or not"""
  active: Boolean!

  """User address"""
  address: Address
  availableCredits: Int

  """User bank account"""
  bankAccount: BankAccount

  """User bank account"""
  bankAccountHidden: BankAccount

  """The base rate that will be charged for the user"""
  baseRate: Float

  """Whether or not the tracking code for the ad conversion has been fired"""
  conversionTracked: Boolean!

  """When the node was created"""
  createdDate: DateTime!

  """Default user currency"""
  currency: String

  """
  Users displayable name, using first name, last name or email to create this
  """
  displayName: String!

  """The e-conomic customer group number to use for this user"""
  economicCustomerGroupId: Int

  """The e-conomic employee number to use for this user"""
  economicEmployeeId: Int

  """User email"""
  email: String!

  """Is user email verified"""
  emailVerified: Boolean!
  features: JSON

  """User first name"""
  firstName: String

  """What work situation the freelancer is currently in"""
  freelancerSituation: String

  """Unique identifier for this type"""
  id: BigInt!

  """Default job type"""
  jobType: JobType

  """Default job type id"""
  jobTypeId: BigInt

  """User language"""
  language: String!

  """Last time user were active"""
  lastActive: DateTime

  """User last name"""
  lastName: String

  """User locale"""
  locale: String

  """Number of times the user has logged in"""
  loginCount: Int!

  """User phone number"""
  phoneNumber: String

  """Referral string - where user signed up from"""
  referral: String

  """A shareable code for referring other users to the system"""
  referralLinkCode: String
  role: RoleEnum!

  """
  The specific day of the month the salary should be paid out on (use 31 for last day)
  """
  salaryPaymentDay: Float

  """When the salary should be paid out for the user"""
  salaryPaymentType: SalaryPaymentTypeEnum

  """The amount of money needed to be reached before a payout will be made"""
  salaryPaymentValue: Float

  """User tax info"""
  taxInfo: TaxInfo

  """User tax info"""
  taxInfoHidden: TaxInfo

  """Default user unit"""
  unit: String

  """When the node was last updated"""
  updatedDate: DateTime!

  """Universal unique identifier"""
  urn: ID!

  """Where the user says they heard about Factofly from"""
  userSpecifiedReferral: String

  """A globally unique identifier for the user"""
  uuid: String!

  """Whether this user is setting some money aside for the vacation payment"""
  vacationPayment: Boolean!
}

type UserConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [UserEdge!]!

  """Flattened list of User type"""
  nodes: [User!]!

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

type UserEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: User!
}

input UserOrderByInputArgs {
  active: SortOrder
  address: AddressOrderByInputArgs
  createdDate: SortOrder
  displayName: SortOrder
  email: SortOrder
  firstName: SortOrder
  freelancerSituation: SortOrder
  internalId: SortOrder
  lastActive: SortOrder
  lastName: SortOrder
  phoneNumber: SortOrder
  referral: SortOrder
  role: SortOrder
  title: SortOrder
  updatedDate: SortOrder
  userSpecifiedReferral: SortOrder
}

input UserUpdateInputArgs {
  accountSetupComplete: Boolean
  address: String
  bankAccount: String
  bankName: String
  bankRegistration: String
  baseRate: Float
  city: String
  countryId: BigInt
  currency: String
  email: String
  firstName: String
  freelancerSituation: String
  jobType: ConnectDisconnectUniqueInputArgs
  language: String
  lastName: String
  personId: String
  phoneNumber: String
  postalCode: String
  salaryPaymentDay: Int
  salaryPaymentType: SalaryPaymentTypeEnum
  salaryPaymentValue: Float
  taxCard: TaxCardEnum
  unit: String
  userSpecifiedReferral: String
  vacationPayment: Boolean
}

input UserWhereInputArgs {
  active: BoolFilter
  address: WhereUniqueInputArgs
  createdDate: DateTimeFilter
  customer: WhereUniqueInputArgs
  displayName: StringFilter
  email: StringFilter
  firstName: StringFilter
  id: BigIntFilter
  lastActive: DateTimeFilter
  lastName: StringFilter
  phoneNumber: StringFilter
  query: String
  referral: StringFilter
  role: RoleFilter
  updatedDate: DateTimeFilter
}

type VatSearchResult {
  address: String
  city: String
  email: String
  name: String
  phoneNumber: String
  postalCode: String
  vatId: BigInt
}

"""Represents NULL values"""
scalar Void

input WhereUniqueInputArgs {
  id: BigInt!
}
